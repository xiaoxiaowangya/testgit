//1、引用必须要初始化
//int a=10;
//int &b=a;
//int &b;//是错误的
//2、一旦引用初始化后，就不可以更改了
#include<iostream>
using namespace std;

int main()
{
	int a=10;
	int &b=a;
	int &c=b;
	cout<<a<<endl;
	cout<<b<<endl;
	cout<<c<<endl;
	c=30;
	cout<<a<<endl;
	cout<<b<<endl;
	cout<<c<<endl;
	system("pause");
	return 0;
}

//引用做函数参数
#include<iostream>
using namespace std;
//引用做函数参数
//作用：函数传参时，可以利用引用的技术让形参修饰实参
//优点：可以简化指针修饰实参

//交换函数
//1、值传递
void mySwap01(int a,int b)
{
	int temp=a;
	a=b;
	b=temp;
}

//2、地址传递
void mySwap02(int *a,int *b)
{
	int temp=*a;
	*a=*b;
	*b=temp;
}
//3、引用传递
void mySwap03(int &a,int &b)
{
	int temp=a;
	a=b;
	b=temp;
}

int main()
{
	int a=10;
	int b=20;

	//mySwap01(a,b);//值传递，形参不会修饰实参

	//mySwap02(&a,&b);//地址传递，形参会修饰实参

	mySwap03(a,b);//引用传递，形参会修饰实参

	cout<<"a="<<a<<endl;
	cout<<"b="<<b<<endl;
	system("pause");
	return 0;
}
//总结：通过引用参数产生的效果和按地址传递是一样的。引用的语法更清楚简单。