构造函数和析构函数
构造函数：主要作用在于创建对象是作为对象的成员属性赋值，构造函数由编译器自动调用，无需手动调用。
析构函数：主要作用在于对象销毁前系统自动调用，执行一些清理工作。

构造函数语法：类名（）{}
1、构造函数，没有返回值也不写void
2，函数名称与类名相同
3，构造函数可以有参数，因此可以发生重载
4，程序在调用对象的时候会调用构造，无须手动调用，而且只会调用一次

析构函数语法：~类名（）{}
1，析构函数，没有返回值也不写void
2，函数名称与类名相同，在名称前加上符号~
3，析构函数不可以有参数，因此不可以发生重载
4，程序在对象销毁前会自动调用析构，无须手动调用，而且只会调用一次


#include<iostream>
using namespace std;
#include<string>
//对象的初始化和清理
//1，构造函数，进行初始化操作
class Person
{
public:
	//1.1、构造函数
	//没有返回值 不要写void
	//函数名 与类名相同
	//构造函数可以有参数，可以发生重载
	//创建对象的时候，构造函数会自动调用而且只会调用一次
	Person()
	{
		cout<<"Person 构造函数的调用"<<endl;
	}
	//2、析构函数，进行清理的操作
	//没有返回值 不写void
	//函数名和类名相同 在名称前加~
	//析构函数不可以有参数的，不可以发生重载
	//对象在销毁前 会自动调用析构函数，而且只会调用一次
	~Person()
	{
		cout<<"~Person 析构函数的调用"<<endl;
	}
};


//构造和析构都是必须1有的实现，如果我们自己不提供，编译器会提供一个空实现的构造和析构
void test01()
{
	Person p;//在栈的数据，test01执行完毕后，释放这个对象
}

int main()
{
	//test01();
	Person p;
	system("pause");
	return 0;
}

#include<iostream>
using namespace std;
#include<string>
//构造函数的分类及调用
//分类
//按照参数分类  无参构造 （默认构造）和有参构造
//按照类型分类  普通构造 拷贝构造

class Person{
	//构造函数
public:
	Person(){
		cout<<"Person的无参构造函数调用"<<endl;
	}
	Person(int a){
		age=a;
		cout<<"Person的有参构造函数调用"<<endl;
	}
	//拷贝构造函数
	Person( const Person &p){
		//将传入的人身上的所有属性，拷贝到我身上
		cout<<"Person的拷贝构造函数调用"<<endl;
		age=p.age;
	}
	~Person(){
		cout<<"Person的析构函数调用"<<endl;
	}
	int age;
};

//调用
void test01(){
	//1、括号法
	//Person p1;//默认构造函数调用
	//Person p2(10);//有参构造函数
	//Person p3(p2);//拷贝构造函数

	//注意事项
	//调用默认构造函数的时候，不要加（）
	//Person p();
	//因为那样编译器会认为是一个函数的声明,不会认为在创建对象

	/*cout<<"p2的年龄："<<p2.age<<endl;
	cout<<"p3的年龄："<<p3.age<<endl;*/

	//2、显示法
	Person p1;
	Person p2=Person(10);//有参构造
	Person p3=Person(p2);//拷贝构造

	//Person(10);//匿名对象  特点：当前行执行结束后，系统会立即回收掉匿名对象
	//cout<<"aaa"<<endl;

	//注意事项
	//不要利用拷贝函数构造函数 初始化匿名对象 编译器会认为 Person （p3）===Person p3;对象声明
	//Person (p3);

	//3、隐式转换法
	Person p4=10;//相当于 写了 Person p4=Person(10);有参构造
	Person p5=p4;//拷贝构造

}


int main()
{
	test01();
	system("pause");
	return 0;
}


#include<iostream>
using namespace std;
#include<string>

//拷贝构造函数调用时机

//1、使用一个已经创建完毕的对象来初始化一个新对象

//2、值传递的方式给函数参数传值

//3、以值方式返回局部对象

class Person{
public:
	Person(){
		cout<<"Person默认构造函数调用"<<endl;
	}
	Person(int age){
		cout<<"Person有参构造函数调用"<<endl;
		m_Age=age;
	}
	Person(const Person &p){
		cout<<"Person拷贝构造函数调用"<<endl;
		m_Age=p.m_Age;
	}
	~Person(){
		cout<<"Person析构函数调用"<<endl;
	}
	int m_Age;
};

//1、使用一个已经创建完毕的对象来初始化一个新对象
void test01(){
	Person p1(20);
	Person p2(p1);
	cout<<"P2的年龄为："<<p2.m_Age<<endl;
}

//2、值传递的方式给函数参数传值

void dowork(Person p){

}


void test02(){
	Person p;
	dowork(p);
}


//3、以值方式返回局部对象

Person dowork2(){
	Person p1;
	return p1;
}
 
void test03(){
	Person p=dowork2();
}

int main()
{
	//test01();
	//test02();
	test03();
	system("pause");
	return 0;
}


//构造函数调用规则
//1、默认构造函数（无参，函数体为空）
//2、默认析构函数（无参，函数体为空）
//3、默认拷贝构造函数，对属性进行拷贝

//构造函数调用规则如下：
//如果用户定义有参构造函数，c++不在提供默认无参构造，但是提供默认拷贝构造
//如果用户定义拷贝构造函数，c++不会提供其他构造函数
#include<iostream>
using namespace std;
#include<string>
//构造函数的调用
//创建一个类，c++编译器会给每一个类都添加至少3个函数
//默认构造 （空实现）
//析构函数 （空实现）
//拷贝构造 （值拷贝）

//2、如果我们写了有参构造函数，编译器就不再提供默认构造，依然提供拷贝构造
//如果我们写了拷贝构造函数，编译器就不再提供其他普通构造函数了
class Person{

public:

	/*Person(){
		cout<<"Person的默认构造函数调用"<<endl;
	}
	Person(int age){
		cout<<"Person的有参构造函数调用"<<endl;
		m_Age=age;
	}*/
	Person(const Person &p){
		cout<<"Person的拷贝构造函数调用"<<endl;
		m_Age=p.m_Age;
	}
	~Person(){
		cout<<"Person的析构函数调用"<<endl;
	}
	int m_Age;
};

//void test01(){
//	Person p;
//	p.m_Age=18;
//
//	Person p2(p);
//	cout<<"p2的年龄为："<<p2.m_Age<<endl;
//
//}

//void test02(){
//	Person p(28);
//	Person p2(p);
//	cout<<"p2的年龄为："<<p2.m_Age<<endl;
//}

int main()
{
	//test01();
	//test02();
	system("pause");
	return 0;
}


//深拷贝与浅拷贝
//深拷贝是面试经典问题，也是常见的一个坑
//浅拷贝：简单的赋值拷贝操作
//深拷贝：在堆区申请空间，进行拷贝操作
#include<iostream>
using namespace std;

class Person{
public:
	Person(){
		cout<<"Person的默认构造函数调用"<<endl;
	}

	Person(int age,int height){
		m_age=age;
		m_Height=new int(height);
		cout<<"Person的有参构造函数调用"<<endl;
	}

	//自己实现拷贝构造函数 解决浅拷贝带来的问题
	Person(const Person &p){
		cout<<"Person拷贝构造函数调用"<<endl;
		m_age=p.m_age;
		//m_Height=p.m_Height;编译器默认实现代码
		//深拷贝操作
		m_Height=new int(*p.m_Height);

	}


	~Person(){
		//析构代码，将堆区开辟数据做释放操作
		if(m_Height!=NULL){
			delete m_Height;
			m_Height=NULL;
		}
		cout<<"Person的析构函数调用"<<endl;

	}
	int m_age;//年龄
	int *m_Height;//身高

};

void test01(){
	Person p1(18,160);
	cout<<"p1的年龄为:"<<p1.m_age<<"身高为："<<*p1.m_Height<<endl;
	Person p2(p1);
	cout<<"p2的年龄为:"<<p2.m_age<<"身高为："<<*p2.m_Height<<endl;
	//浅拷贝带来的问题就是1堆区的内存重复释放
	//浅拷贝的问题 要利用深拷贝进行解决
}

int main(){

	test01();
	system("pause");
	return 0;
}
//总结：如果属性有在堆区开辟的，一定要自己提供拷贝构造函数，防止浅拷贝带来的问题


