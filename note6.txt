//初始化列表
#include<iostream>
using namespace std;

class Person{
	
public:
	//传统初始化操作
	/*Person(int a,int b,int c){
		m_A=a;
		m_B=b;
		m_C=c;
	}*/

	//初始化列表初始化属性
	Person(int a,int b,int c) : m_A(a),m_B(b),m_C(c){

		}

	int m_A;
	int m_B;
	int m_C;

};

void test01(){
	//Person p(10,20,30);
	Person p(30,20,10);
	cout<<"m_A="<<p.m_A<<endl;
	cout<<"m_B="<<p.m_B<<endl;
	cout<<"m_C="<<p.m_C<<endl;
}

int main(){

	test01();
	system("pause");
	return 0;
}

//类对象作为类成员
//c++类中的成员可以是另一个类的对象，我们称该成员为对象成员

#include<iostream>
using namespace std;
#include<string>
//类对象作为类成员

//手机类
class Phone{
public:
	Phone(string Pname){
		m_Pname=Pname;
	}
	string m_Pname;

};
//人类
class Person{
public:

	
	Person(string name,string Pname):m_name(name),m_Phone(Pname){//Phone m_Phone=Pname;隐式转换法
	}

	//姓名
	string m_name;
	//手机
	Phone m_Phone;
};

void test01(){

	Person p("张三","华为P50");
	cout<<p.m_name<<"拿着"<<p.m_Phone.m_Pname<<endl;
}

int main(){


	test01();
	system("pause");

	return 0;
}