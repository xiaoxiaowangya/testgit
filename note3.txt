#include<iostream>
using namespace std;

//函数的默认参数

//如果我们自己传输数据，就用自己的数据，如果没有，那么用默认值
//语法：返回值类型 函数名（形参=默认值）{}
int func(int a,int b=20,int c=30)
{
	return a+b+c;
}

int func2(int a,int b ,int c,int d=10)
{
	return a+b+c+d;
}

//注意事项
//1、如果某个位置已经有了默认参数，那么从这个位置往后，从左到右都必须有默认值

//2、如果函数声明有默认参数，函数实现就不能有默认参数
//声明和实现只能有一个默认参数
int func3(int a=10,int b=10);//声明
int func3(int a,int b)//实现
{
	return a+b;
}
int main()
{
	cout<<func(10)<<endl;

	system("pause");
	return 0;
}
//


#include<iostream>
using namespace std;

//占位参数
//返回值类型 函数名（数据类型）{}
//占位参数 还可以有默认参数

void func(int a,int)
{
	cout<<"this is func a="<<a<<endl;
}

int main()
{
	func(10.0);



	system("pause");
	return 0;
}


//函数重载
//作用：函数名可以相同，提高复用性

//函数重载满足条件：
//1、同一个作用域下
//2、函数名相同
//3、函数参数类型不同,或者个数不同,或者顺序不同

//注意：函数的返回值不可以作为函数重载的条件
//如：//int func(int a,double b)
	  //{
	  //	cout<<"func(int a,double b)的调用"<<endl;
	  //}

#include<iostream>
using namespace std;

void func()
{
	cout<<"func的调用"<<endl;
}

void func(int a)
{
	cout<<"func（int a)的调用"<<endl;
}

void func(double a)
{
	cout<<"func（double a)的调用"<<endl;
}

void func(double a,int b)
{
	cout<<"func（double a,int b)的调用"<<endl;
}

void func(int a,double b)
{
	cout<<"func（int a,double b)的调用"<<endl;
}

int main()
{
	func(1);
	func();
	func(3.14);
	func(3.14,1);
	func(1,3.14);
	system("pause");
	return 0;
}
//
